
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003460  08003460  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000018  08003480  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200000fc  08003480  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087e8  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d5  00000000  00000000  00028830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156f7  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ec3  00000000  00000000  00040657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083857  00000000  00000000  0004951a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d18  00000000  00000000  000ccdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002654 	.word	0x08002654

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002654 	.word	0x08002654

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db0b      	blt.n	8000502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 021f 	and.w	r2, r3, #31
 80004f0:	4907      	ldr	r1, [pc, #28]	; (8000510 <__NVIC_EnableIRQ+0x38>)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	095b      	lsrs	r3, r3, #5
 80004f8:	2001      	movs	r0, #1
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000e100 	.word	0xe000e100

08000514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db0a      	blt.n	800053e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	490c      	ldr	r1, [pc, #48]	; (8000560 <__NVIC_SetPriority+0x4c>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800053c:	e00a      	b.n	8000554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4908      	ldr	r1, [pc, #32]	; (8000564 <__NVIC_SetPriority+0x50>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3b04      	subs	r3, #4
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	440b      	add	r3, r1
 8000552:	761a      	strb	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <USARTinit>:
#define MAX_BUFFER_SIZE 100
char buffer[MAX_BUFFER_SIZE];
volatile uint32_t buffer_index = 0;

void USARTinit()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (0b100000000000000000);
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <USARTinit+0xc4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <USARTinit+0xc4>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (0b1000);
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <USARTinit+0xc4>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <USARTinit+0xc4>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
	   GPIOD->MODER &=	~(0b11110000000000);
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <USARTinit+0xc8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <USARTinit+0xc8>)
 800058a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800058e:	6013      	str	r3, [r2, #0]
	   GPIOD->MODER |=	(0b10100000000000);
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <USARTinit+0xc8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <USARTinit+0xc8>)
 8000596:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800059a:	6013      	str	r3, [r2, #0]
	   GPIOD->AFR[0] &= ~(0b1111111100000000000000000000);
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <USARTinit+0xc8>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <USARTinit+0xc8>)
 80005a2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80005a6:	6213      	str	r3, [r2, #32]
	   GPIOD->AFR[0] |= (0b0111011100000000000000000000);
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <USARTinit+0xc8>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <USARTinit+0xc8>)
 80005ae:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 80005b2:	6213      	str	r3, [r2, #32]

	   USART2->CR1 = USART_CR1_UE;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <USARTinit+0xcc>)
 80005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ba:	60da      	str	r2, [r3, #12]
	   USART2->BRR = 42000000 / 9600;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <USARTinit+0xcc>)
 80005be:	f241 1217 	movw	r2, #4375	; 0x1117
 80005c2:	609a      	str	r2, [r3, #8]
	   USART2->CR1 &= ~USART_CR1_M; // 8 бит данных
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <USARTinit+0xcc>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <USARTinit+0xcc>)
 80005ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005ce:	60d3      	str	r3, [r2, #12]
	   USART2->CR1 &= ~USART_CR1_PCE; // Без бита контроля четности
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <USARTinit+0xcc>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <USARTinit+0xcc>)
 80005d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005da:	60d3      	str	r3, [r2, #12]
	   USART2->CR2 &= ~USART_CR2_STOP;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <USARTinit+0xcc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <USARTinit+0xcc>)
 80005e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005e6:	6113      	str	r3, [r2, #16]
	   // Включаем передатчик и приемник USART2
	   USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <USARTinit+0xcc>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <USARTinit+0xcc>)
 80005ee:	f043 030c 	orr.w	r3, r3, #12
 80005f2:	60d3      	str	r3, [r2, #12]

	   // Включаем USART2
	   USART2->CR1 |= USART_CR1_UE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <USARTinit+0xcc>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <USARTinit+0xcc>)
 80005fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005fe:	60d3      	str	r3, [r2, #12]
	   USART2->CR2 = 0;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <USARTinit+0xcc>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	   USART2->CR3 = 0;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <USARTinit+0xcc>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]

	   USART2->CR1 |= USART_CR1_RXNEIE; // Разрешаем прерывание по приему данных
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <USARTinit+0xcc>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <USARTinit+0xcc>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	60d3      	str	r3, [r2, #12]

	   NVIC_SetPriority(USART2_IRQn, 0); // Устанавливаем приоритет прерывания USART2
 8000618:	2100      	movs	r1, #0
 800061a:	2026      	movs	r0, #38	; 0x26
 800061c:	f7ff ff7a 	bl	8000514 <__NVIC_SetPriority>
	   NVIC_EnableIRQ(USART2_IRQn); // Разрешаем прерывание USART2
 8000620:	2026      	movs	r0, #38	; 0x26
 8000622:	f7ff ff59 	bl	80004d8 <__NVIC_EnableIRQ>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40004400 	.word	0x40004400

08000638 <SPI2_Init>:
#include "SDFlash.h"

void SPI2_Init(void) {
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
    // Включаем тактирование для GPIOB и SPI2
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // Включаем тактирование для GPIOB
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <SPI2_Init+0xb4>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <SPI2_Init+0xb4>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;   // Включаем тактирование для SPI2
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SPI2_Init+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SPI2_Init+0xb4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40

    // Настраиваем пины GPIOB 13 (SCK), 14 (MISO) и 15 (MOSI) в режим альтернативной функции (AF5 для SPI2)
    GPIOB->MODER &= ~(GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk | GPIO_MODER_MODE15_Msk);
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <SPI2_Init+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a25      	ldr	r2, [pc, #148]	; (80006f0 <SPI2_Init+0xb8>)
 800065a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800065e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);  // Устанавливаем режим альтернативной функции
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SPI2_Init+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SPI2_Init+0xb8>)
 8000666:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 800066a:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL13_Msk | GPIO_AFRH_AFSEL14_Msk | GPIO_AFRH_AFSEL15_Msk);
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SPI2_Init+0xb8>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SPI2_Init+0xb8>)
 8000672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000676:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (5 << GPIO_AFRH_AFSEL13_Pos) | (5 << GPIO_AFRH_AFSEL14_Pos) | (5 << GPIO_AFRH_AFSEL15_Pos); // Альтернативная функция AF5 для SPI2
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SPI2_Init+0xb8>)
 800067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067c:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SPI2_Init+0xb8>)
 800067e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000682:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000686:	6253      	str	r3, [r2, #36]	; 0x24

    GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13 | GPIO_OSPEEDER_OSPEEDR14 | GPIO_OSPEEDER_OSPEEDR15);  // Высокая скорость
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <SPI2_Init+0xb8>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <SPI2_Init+0xb8>)
 800068e:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 8000692:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk | GPIO_PUPDR_PUPD15_Msk);  // Без подтяжки
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <SPI2_Init+0xb8>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <SPI2_Init+0xb8>)
 800069a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800069e:	60d3      	str	r3, [r2, #12]
    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);  // Пуш-пулл
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <SPI2_Init+0xb8>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <SPI2_Init+0xb8>)
 80006a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006aa:	6053      	str	r3, [r2, #4]

    // Настройка SPI2
    SPI2->CR1 = 0;  // Сбросим регистр управления
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SPI2_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
    SPI2->CR1 |= SPI_CR1_MSTR;  // Устанавливаем режим ведущего (Master)
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <SPI2_Init+0xbc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <SPI2_Init+0xbc>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_BR;    // Настраиваем скорость передачи (Baud Rate)
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <SPI2_Init+0xbc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <SPI2_Init+0xbc>)
 80006c4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80006c8:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;  // Программное управление SS (SSM) и внутренний сигнал SS (SSI)
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <SPI2_Init+0xbc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <SPI2_Init+0xbc>)
 80006d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80006d4:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SPE;   // Включаем SPI2
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <SPI2_Init+0xbc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <SPI2_Init+0xbc>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	6013      	str	r3, [r2, #0]
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40003800 	.word	0x40003800

080006f8 <SPI2_TransferByte>:
    SPI2->DR = 0xFF;                   // Отправляем пустой байт
    while (!(SPI2->SR & SPI_SR_RXNE)); // Ждем окончания приема
    return SPI2->DR;                   // Читаем принятый байт
}

uint8_t SPI2_TransferByte(uint8_t byte) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    while (!(SPI2->SR & SPI_SR_TXE));  // Ждем пока буфер передатчика не освободится
 8000702:	bf00      	nop
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <SPI2_TransferByte+0x40>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <SPI2_TransferByte+0xc>
    SPI2->DR = byte;                   // Отправляем байт
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <SPI2_TransferByte+0x40>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	60d3      	str	r3, [r2, #12]
    while (!(SPI2->SR & SPI_SR_RXNE)); // Ждем окончания приема
 8000716:	bf00      	nop
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <SPI2_TransferByte+0x40>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <SPI2_TransferByte+0x20>
    return SPI2->DR;                   // Возвращаем принятый байт
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SPI2_TransferByte+0x40>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	b2db      	uxtb	r3, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40003800 	.word	0x40003800

0800073c <SPI2_LoopbackTest>:

char SPI2_LoopbackTest(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    uint8_t data = 0xAA;  // Данные для отправки
 8000742:	23aa      	movs	r3, #170	; 0xaa
 8000744:	71fb      	strb	r3, [r7, #7]
    uint8_t received;

    received = SPI2_TransferByte(data);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffd5 	bl	80006f8 <SPI2_TransferByte>
 800074e:	4603      	mov	r3, r0
 8000750:	71bb      	strb	r3, [r7, #6]

    if (received == data) {
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	429a      	cmp	r2, r3
 8000758:	d101      	bne.n	800075e <SPI2_LoopbackTest+0x22>
        return 'y';
 800075a:	2379      	movs	r3, #121	; 0x79
 800075c:	e000      	b.n	8000760 <SPI2_LoopbackTest+0x24>
    	// Успешно, данные совпадают
    } else {
    	return 'n';
 800075e:	236e      	movs	r3, #110	; 0x6e
        // Ошибка, данные не совпадают
    }
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af04      	add	r7, sp, #16

  HAL_Init();
 800076e:	f000 fd37 	bl	80011e0 <HAL_Init>


  SystemClock_Config();
 8000772:	f000 f855 	bl	8000820 <SystemClock_Config>


  MX_GPIO_Init();
 8000776:	f000 f8f5 	bl	8000964 <MX_GPIO_Init>
  MX_SPI1_Init();
 800077a:	f000 f8bb 	bl	80008f4 <MX_SPI1_Init>

USARTinit();
 800077e:	f7ff fef3 	bl	8000568 <USARTinit>


ST7735_Init();//допилинная-перепиленая библиотека из интернета
 8000782:	f000 fac3 	bl	8000d0c <ST7735_Init>



   ST7735_FillScreen(ST7735_RED);
 8000786:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800078a:	f000 fc03 	bl	8000f94 <ST7735_FillScreen>

   SPI2_Init();
 800078e:	f7ff ff53 	bl	8000638 <SPI2_Init>
   char flagSPI2 = SPI2_LoopbackTest();
 8000792:	f7ff ffd3 	bl	800073c <SPI2_LoopbackTest>
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
   char mas[1];
   mas[0]=flagSPI2;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	713b      	strb	r3, [r7, #4]
   ST7735_DrawString(10, 30, &flagSPI2, Font_11x18, ST7735_RED, ST7735_BLACK);
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <main+0xa8>)
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2200      	movs	r2, #0
 80007a4:	9202      	str	r2, [sp, #8]
 80007a6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007aa:	9201      	str	r2, [sp, #4]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	9200      	str	r2, [sp, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	460a      	mov	r2, r1
 80007b4:	211e      	movs	r1, #30
 80007b6:	200a      	movs	r0, #10
 80007b8:	f000 faec 	bl	8000d94 <ST7735_DrawString>
  while (1)
  {
	  ST7735_DrawString(10, 0, "hello", Font_11x18, ST7735_RED, ST7735_BLACK);
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <main+0xa8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	9202      	str	r2, [sp, #8]
 80007c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <main+0xac>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	200a      	movs	r0, #10
 80007d4:	f000 fade 	bl	8000d94 <ST7735_DrawString>
    /* USER CODE BEGIN 3 */
	  if (buffer_index > 0) {
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <main+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0ed      	beq.n	80007bc <main+0x54>
	 	      ST7735_FillScreen(ST7735_BLUE);
 80007e0:	201f      	movs	r0, #31
 80007e2:	f000 fbd7 	bl	8000f94 <ST7735_FillScreen>

	       // Вызываем функцию для вывода текста на дисплей
	       ST7735_DrawString(10, 0, buffer, Font_11x18, ST7735_RED, ST7735_BLACK);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <main+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	9202      	str	r2, [sp, #8]
 80007ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	9200      	str	r2, [sp, #0]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <main+0xb4>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fac9 	bl	8000d94 <ST7735_DrawString>
	       // Очищаем буфер
	       buffer_index = 0;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <main+0xb0>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
	       buffer[0] = '\0';
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <main+0xb4>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	  ST7735_DrawString(10, 0, "hello", Font_11x18, ST7735_RED, ST7735_BLACK);
 800080e:	e7d5      	b.n	80007bc <main+0x54>
 8000810:	20000000 	.word	0x20000000
 8000814:	0800266c 	.word	0x0800266c
 8000818:	20000098 	.word	0x20000098
 800081c:	20000034 	.word	0x20000034

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff08 	bl	8002644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <SystemClock_Config+0xcc>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <SystemClock_Config+0xd0>)
 800086e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000898:	2354      	movs	r3, #84	; 0x54
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ffb3 	bl	8001814 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b4:	f000 f89a 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fa15 	bl	8001d04 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008e0:	f000 f884 	bl	80009ec <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	; 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI1_Init+0x68>)
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <MX_SPI1_Init+0x6c>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI1_Init+0x68>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SPI1_Init+0x68>)
 8000908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800090c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SPI1_Init+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_SPI1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI1_Init+0x68>)
 8000922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI1_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI1_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SPI1_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI1_Init+0x68>)
 8000942:	220a      	movs	r2, #10
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_SPI1_Init+0x68>)
 8000948:	f001 fbc8 	bl	80020dc <HAL_SPI_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000952:	f000 f84b 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000009c 	.word	0x2000009c
 8000960:	40013000 	.word	0x40013000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_GPIO_Init+0x80>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x80>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_GPIO_Init+0x80>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x80>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_GPIO_Init+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|Reset_Pin|CS_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x84>)
 80009ba:	f000 ff11 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin Reset_Pin CS_Pin */
  GPIO_InitStruct.Pin = A0_Pin|Reset_Pin|CS_Pin;
 80009be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x84>)
 80009d8:	f000 fd7e 	bl	80014d8 <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <ST7735_GPIO_Init>:
static void ST7735_WriteData(uint8_t* buff, size_t buff_size);
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);
static void ST7735_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <ST7735_GPIO_Init+0x60>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <ST7735_GPIO_Init+0x60>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <ST7735_GPIO_Init+0x60>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <ST7735_GPIO_Init+0x64>)
 8000a30:	f000 fed6 	bl	80017e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 8000a34:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000a38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <ST7735_GPIO_Init+0x64>)
 8000a4c:	f000 fd44 	bl	80014d8 <HAL_GPIO_Init>
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <ST7735_Reset+0x28>)
 8000a6c:	f000 feb8 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a70:	2014      	movs	r0, #20
 8000a72:	f000 fc27 	bl	80012c4 <HAL_Delay>
	TFT_RES_H();
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <ST7735_Reset+0x28>)
 8000a7e:	f000 feaf 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020000 	.word	0x40020000

08000a8c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <ST7735_WriteCommand+0x2c>)
 8000a9e:	f000 fe9f 	bl	80017e0 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa2:	1df9      	adds	r1, r7, #7
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <ST7735_WriteCommand+0x30>)
 8000aac:	f001 fb9f 	bl	80021ee <HAL_SPI_Transmit>
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	2000009c 	.word	0x2000009c

08000ac0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <ST7735_WriteData+0x30>)
 8000ad2:	f000 fe85 	bl	80017e0 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <ST7735_WriteData+0x34>)
 8000ae2:	f001 fb84 	bl	80021ee <HAL_SPI_Transmit>
#endif
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020000 	.word	0x40020000
 8000af4:	2000009c 	.word	0x2000009c

08000af8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000b0a:	e034      	b.n	8000b76 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffb7 	bl	8000a8c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b32:	7abb      	ldrb	r3, [r7, #10]
 8000b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b38:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000b3a:	7abb      	ldrb	r3, [r7, #10]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b40:	7abb      	ldrb	r3, [r7, #10]
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffbb 	bl	8000ac0 <ST7735_WriteData>
            addr += numArgs;
 8000b4a:	7abb      	ldrb	r3, [r7, #10]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000b52:	89bb      	ldrh	r3, [r7, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00e      	beq.n	8000b76 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b62:	89bb      	ldrh	r3, [r7, #12]
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d102      	bne.n	8000b6e <ST7735_ExecuteCommandList+0x76>
 8000b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b6c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fba7 	bl	80012c4 <HAL_Delay>
    while(numCommands--)
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	1e5a      	subs	r2, r3, #1
 8000b7a:	73fa      	strb	r2, [r7, #15]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1c5      	bne.n	8000b0c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71bb      	strb	r3, [r7, #6]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	717b      	strb	r3, [r7, #5]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000baa:	202a      	movs	r0, #42	; 0x2a
 8000bac:	f7ff ff6e 	bl	8000a8c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	733b      	strb	r3, [r7, #12]
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <ST7735_SetAddressWindow+0x88>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	737b      	strb	r3, [r7, #13]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73bb      	strb	r3, [r7, #14]
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <ST7735_SetAddressWindow+0x88>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff72 	bl	8000ac0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000bdc:	202b      	movs	r0, #43	; 0x2b
 8000bde:	f7ff ff55 	bl	8000a8c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <ST7735_SetAddressWindow+0x8c>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <ST7735_SetAddressWindow+0x8c>)
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000c06:	202c      	movs	r0, #44	; 0x2c
 8000c08:	f7ff ff40 	bl	8000a8c <ST7735_WriteCommand>
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	200000f4 	.word	0x200000f4
 8000c18:	200000f5 	.word	0x200000f5

08000c1c <ST7735_WriteChar>:


static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	b590      	push	{r4, r7, lr}
 8000c20:	b089      	sub	sp, #36	; 0x24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	b2d8      	uxtb	r0, r3
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	b2d9      	uxtb	r1, r3
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c42:	4413      	add	r3, r2
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	3b01      	subs	r3, #1
 8000c48:	b2dc      	uxtb	r4, r3
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4622      	mov	r2, r4
 8000c5c:	f7ff ff96 	bl	8000b8c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	e043      	b.n	8000cee <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch-33) * font.height + i];
 8000c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	3b21      	subs	r3, #33	; 0x21
 8000c6c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	440b      	add	r3, r1
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	617b      	str	r3, [r7, #20]

        for(j = 0; j < font.width; j++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e029      	b.n	8000cdc <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00e      	beq.n	8000cb6 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000c98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	743b      	strb	r3, [r7, #16]
 8000ca2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2102      	movs	r1, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff06 	bl	8000ac0 <ST7735_WriteData>
 8000cb4:	e00f      	b.n	8000cd6 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };//
 8000cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	733b      	strb	r3, [r7, #12]
 8000cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2102      	movs	r1, #2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fef5 	bl	8000ac0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d3cf      	bcc.n	8000c88 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d3b5      	bcc.n	8000c66 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3724      	adds	r7, #36	; 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d06:	b002      	add	sp, #8
 8000d08:	4770      	bx	lr
	...

08000d0c <ST7735_Init>:

void ST7735_Init()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000d10:	f7ff fe72 	bl	80009f8 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1a:	481a      	ldr	r0, [pc, #104]	; (8000d84 <ST7735_Init+0x78>)
 8000d1c:	f000 fd60 	bl	80017e0 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000d20:	f7ff fe9e 	bl	8000a60 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <ST7735_Init+0x7c>)
 8000d26:	f7ff fee7 	bl	8000af8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <ST7735_Init+0x80>)
 8000d2c:	f7ff fee4 	bl	8000af8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <ST7735_Init+0x84>)
 8000d32:	f7ff fee1 	bl	8000af8 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <ST7735_Init+0x78>)
 8000d3e:	f000 fd4f 	bl	80017e0 <HAL_GPIO_WritePin>
    GPIOA->LCKR&= ~(0b1100);
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <ST7735_Init+0x78>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <ST7735_Init+0x78>)
 8000d48:	f023 030c 	bic.w	r3, r3, #12
 8000d4c:	61d3      	str	r3, [r2, #28]
       GPIOA->MODER &=	~(0b11110000);
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <ST7735_Init+0x78>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <ST7735_Init+0x78>)
 8000d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d58:	6013      	str	r3, [r2, #0]
       GPIOA->PUPDR &= ~(0b11110000);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <ST7735_Init+0x78>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <ST7735_Init+0x78>)
 8000d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d64:	60d3      	str	r3, [r2, #12]
       GPIOA->OTYPER &= ~(0b1100);
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <ST7735_Init+0x78>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <ST7735_Init+0x78>)
 8000d6c:	f023 030c 	bic.w	r3, r3, #12
 8000d70:	6053      	str	r3, [r2, #4]
       GPIOA->OSPEEDR &= ~(0b11110000);
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <ST7735_Init+0x78>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <ST7735_Init+0x78>)
 8000d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d7c:	6093      	str	r3, [r2, #8]
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020000 	.word	0x40020000
 8000d88:	080033d0 	.word	0x080033d0
 8000d8c:	0800340c 	.word	0x0800340c
 8000d90:	0800341c 	.word	0x0800341c

08000d94 <ST7735_DrawString>:

    TFT_CS_H();
}


void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d94:	b082      	sub	sp, #8
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b088      	sub	sp, #32
 8000d9a:	af04      	add	r7, sp, #16
 8000d9c:	603a      	str	r2, [r7, #0]
 8000d9e:	61fb      	str	r3, [r7, #28]
 8000da0:	4603      	mov	r3, r0
 8000da2:	80fb      	strh	r3, [r7, #6]
 8000da4:	460b      	mov	r3, r1
 8000da6:	80bb      	strh	r3, [r7, #4]
    TFT_CS_L();
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	482d      	ldr	r0, [pc, #180]	; (8000e64 <ST7735_DrawString+0xd0>)
 8000db0:	f000 fd16 	bl	80017e0 <HAL_GPIO_WritePin>

    while (*str) {
 8000db4:	e043      	b.n	8000e3e <ST7735_DrawString+0xaa>
        if (x + font.width >= _width) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	7f3a      	ldrb	r2, [r7, #28]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <ST7735_DrawString+0xd4>)
 8000dbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	db16      	blt.n	8000df4 <ST7735_DrawString+0x60>
            x = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000dca:	7f7b      	ldrb	r3, [r7, #29]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	7f7a      	ldrb	r2, [r7, #29]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <ST7735_DrawString+0xd8>)
 8000ddc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	da31      	bge.n	8000e48 <ST7735_DrawString+0xb4>
                break;
            }

            if (*str == ' ') {
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d103      	bne.n	8000df4 <ST7735_DrawString+0x60>
                // Пропускаем пробелы в начале новой строки
                str++;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	603b      	str	r3, [r7, #0]
                continue;
 8000df2:	e024      	b.n	8000e3e <ST7735_DrawString+0xaa>
            }
        }
        if (*str == ' ') {
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b20      	cmp	r3, #32
 8000dfa:	d108      	bne.n	8000e0e <ST7735_DrawString+0x7a>
            x += font.width;
 8000dfc:	7f3b      	ldrb	r3, [r7, #28]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4413      	add	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
            // Пропускаем пробелы в начале новой строки
            str++;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
            continue;
 8000e0c:	e017      	b.n	8000e3e <ST7735_DrawString+0xaa>
        }

        // Преобразуем символ в индекс для шрифта
        uint8_t char_index = *str - 31;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3b1f      	subs	r3, #31
 8000e14:	73fb      	strb	r3, [r7, #15]

        // Выводим символ с полученным индексом
        ST7735_WriteChar(x, y, char_index, font, color, bgcolor);
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	88b9      	ldrh	r1, [r7, #4]
 8000e1a:	88f8      	ldrh	r0, [r7, #6]
 8000e1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f7ff fef7 	bl	8000c1c <ST7735_WriteChar>

        x += font.width;
 8000e2e:	7f3b      	ldrb	r3, [r7, #28]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4413      	add	r3, r2
 8000e36:	80fb      	strh	r3, [r7, #6]
        str++;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	603b      	str	r3, [r7, #0]
    while (*str) {
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1b7      	bne.n	8000db6 <ST7735_DrawString+0x22>
 8000e46:	e000      	b.n	8000e4a <ST7735_DrawString+0xb6>
                break;
 8000e48:	bf00      	nop
    }

    TFT_CS_H();
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <ST7735_DrawString+0xd0>)
 8000e52:	f000 fcc5 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e60:	b002      	add	sp, #8
 8000e62:	4770      	bx	lr
 8000e64:	40020000 	.word	0x40020000
 8000e68:	2000000a 	.word	0x2000000a
 8000e6c:	20000008 	.word	0x20000008

08000e70 <ST7735_FillRectangle>:


void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	4603      	mov	r3, r0
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	807b      	strh	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <ST7735_FillRectangle+0x114>)
 8000e92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	da6f      	bge.n	8000f7a <ST7735_FillRectangle+0x10a>
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <ST7735_FillRectangle+0x118>)
 8000e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	da69      	bge.n	8000f7a <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a35      	ldr	r2, [pc, #212]	; (8000f84 <ST7735_FillRectangle+0x114>)
 8000eae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	dd06      	ble.n	8000ec4 <ST7735_FillRectangle+0x54>
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <ST7735_FillRectangle+0x114>)
 8000eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <ST7735_FillRectangle+0x118>)
 8000ecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	dd06      	ble.n	8000ee2 <ST7735_FillRectangle+0x72>
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <ST7735_FillRectangle+0x118>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	4828      	ldr	r0, [pc, #160]	; (8000f8c <ST7735_FillRectangle+0x11c>)
 8000eea:	f000 fc79 	bl	80017e0 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2d8      	uxtb	r0, r3
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2dc      	uxtb	r4, r3
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	883b      	ldrh	r3, [r7, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4622      	mov	r2, r4
 8000f18:	f7ff fe38 	bl	8000b8c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
 8000f26:	8c3b      	ldrh	r3, [r7, #32]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <ST7735_FillRectangle+0x11c>)
 8000f34:	f000 fc54 	bl	80017e0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	80bb      	strh	r3, [r7, #4]
 8000f3c:	e013      	b.n	8000f66 <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	e00a      	b.n	8000f5a <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000f44:	f107 010c 	add.w	r1, r7, #12
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <ST7735_FillRectangle+0x120>)
 8000f50:	f001 f94d 	bl	80021ee <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f1      	bne.n	8000f44 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	80bb      	strh	r3, [r7, #4]
 8000f66:	88bb      	ldrh	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e8      	bne.n	8000f3e <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <ST7735_FillRectangle+0x11c>)
 8000f74:	f000 fc34 	bl	80017e0 <HAL_GPIO_WritePin>
 8000f78:	e000      	b.n	8000f7c <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 8000f7a:	bf00      	nop
}
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000000a 	.word	0x2000000a
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <ST7735_FillScreen>:


void ST7735_FillScreen(uint16_t color)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <ST7735_FillScreen+0x30>)
 8000fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <ST7735_FillScreen+0x34>)
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	b299      	uxth	r1, r3
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff5a 	bl	8000e70 <ST7735_FillRectangle>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000000a 	.word	0x2000000a
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_SPI_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12b      	bne.n	8001096 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_SPI_MspInit+0x8c>)
 8001092:	f000 fa21 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40013000 	.word	0x40013000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <USART2_IRQHandler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void USART2_IRQHandler() {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	 if (USART2->SR & USART_SR_RXNE) { // Проверяем, что прерывание вызвано приемом данных
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <USART2_IRQHandler+0x5c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01d      	beq.n	80010fa <USART2_IRQHandler+0x4e>
	        char received_char = USART2->DR; // Считываем принятый символ
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <USART2_IRQHandler+0x5c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	71fb      	strb	r3, [r7, #7]

	        // Отправляем принятый символ назад
	        while (!(USART2->SR & USART_SR_TXE)); // Ждем, пока буфер передачи освободится
 80010c4:	bf00      	nop
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <USART2_IRQHandler+0x5c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f9      	beq.n	80010c6 <USART2_IRQHandler+0x1a>
	        USART2->DR = received_char; // Передаем символ для отправки
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <USART2_IRQHandler+0x5c>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	6053      	str	r3, [r2, #4]

	        // Если нужно очистить флаг прерывания, это делается автоматически при чтении DR регистра

	        // Сохраняем принятый символ в буфере
			if (buffer_index < MAX_BUFFER_SIZE - 1) { // Проверяем, что есть место в буфере
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <USART2_IRQHandler+0x60>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b62      	cmp	r3, #98	; 0x62
 80010de:	d80c      	bhi.n	80010fa <USART2_IRQHandler+0x4e>
				buffer[buffer_index++] = received_char;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <USART2_IRQHandler+0x60>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4909      	ldr	r1, [pc, #36]	; (800110c <USART2_IRQHandler+0x60>)
 80010e8:	600a      	str	r2, [r1, #0]
 80010ea:	4909      	ldr	r1, [pc, #36]	; (8001110 <USART2_IRQHandler+0x64>)
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	54ca      	strb	r2, [r1, r3]
				buffer[buffer_index] = '\0'; // Добавляем завершающий нулевой символ
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <USART2_IRQHandler+0x60>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <USART2_IRQHandler+0x64>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	54d1      	strb	r1, [r2, r3]
			}
	 }

}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40004400 	.word	0x40004400
 800110c:	20000098 	.word	0x20000098
 8001110:	20000034 	.word	0x20000034

08001114 <NMI_Handler>:

void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f890 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a8:	4c0b      	ldr	r4, [pc, #44]	; (80011d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b6:	f7ff ffd7 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fa1f 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fad3 	bl	8000768 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011d0:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 80011d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011d8:	200000fc 	.word	0x200000fc

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f931 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff feda 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f93b 	bl	80014be <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f911 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000014 	.word	0x20000014
 8001280:	20000010 	.word	0x20000010

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000014 	.word	0x20000014
 80012a8:	200000f8 	.word	0x200000f8

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200000f8 	.word	0x200000f8

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000014 	.word	0x20000014

0800130c <__NVIC_SetPriorityGrouping>:
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff5c 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffb0 	bl	800142c <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e159      	b.n	80017a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8148 	bne.w	80017a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d005      	beq.n	800152a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	2b02      	cmp	r3, #2
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d017      	beq.n	80015c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	69b9      	ldr	r1, [r7, #24]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a2 	beq.w	80017a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x2f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x202>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x2f4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x1fe>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <HAL_GPIO_Init+0x2f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a46      	ldr	r2, [pc, #280]	; (80017d4 <HAL_GPIO_Init+0x2fc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x1f6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_GPIO_Init+0x300>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x1f2>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_GPIO_Init+0x304>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001748:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_GPIO_Init+0x304>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_GPIO_Init+0x304>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_GPIO_Init+0x304>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f aea2 	bls.w	80014f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e267      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d075      	beq.n	800191e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001846:	2b08      	cmp	r3, #8
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0x108>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d157      	bne.n	800191c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e242      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x74>
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x98>
 8001892:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6f      	ldr	r2, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6c      	ldr	r2, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 80018ac:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fcee 	bl	80012ac <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fcea 	bl	80012ac <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e207      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xc0>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fcda 	bl	80012ac <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fcd6 	bl	80012ac <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1f3      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0xe8>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c7      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x244>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fc8f 	bl	80012ac <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fc8b 	bl	80012ac <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a8      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x244>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc6e 	bl	80012ac <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc6a 	bl	80012ac <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e187      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d036      	beq.n	8001a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x248>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc4e 	bl	80012ac <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc4a 	bl	80012ac <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e167      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x200>
 8001a32:	e01b      	b.n	8001a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x248>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fc37 	bl	80012ac <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e00e      	b.n	8001a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff fc33 	bl	80012ac <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d907      	bls.n	8001a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e150      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470000 	.word	0x42470000
 8001a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8097 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b81      	ldr	r3, [pc, #516]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a7c      	ldr	r2, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b77      	ldr	r3, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a73      	ldr	r2, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fbf3 	bl	80012ac <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff fbef 	bl	80012ac <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e10c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x2ea>
 8001af0:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a63      	ldr	r2, [pc, #396]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x324>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x30c>
 8001b06:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a5e      	ldr	r2, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a5b      	ldr	r2, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x324>
 8001b20:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fbb4 	bl	80012ac <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff fbb0 	bl	80012ac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0cb      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ee      	beq.n	8001b48 <HAL_RCC_OscConfig+0x334>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fb9e 	bl	80012ac <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff fb9a 	bl	80012ac <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0b5      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ee      	bne.n	8001b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a1 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d05c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d141      	bne.n	8001c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb6e 	bl	80012ac <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff fb6a 	bl	80012ac <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e087      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb43 	bl	80012ac <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fb3f 	bl	80012ac <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e05c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x416>
 8001c48:	e054      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb2c 	bl	80012ac <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fb28 	bl	80012ac <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e045      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x444>
 8001c76:	e03d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e038      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x4ec>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d028      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d121      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0cc      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d90c      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b65      	ldr	r3, [pc, #404]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	494d      	ldr	r1, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d044      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d119      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e067      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4934      	ldr	r1, [pc, #208]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff fa5a 	bl	80012ac <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff fa56 	bl	80012ac <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e04f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d20c      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e032      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8a:	f000 f821 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	5ccb      	ldrb	r3, [r1, r3]
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f9ba 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08003448 	.word	0x08003448
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	20000010 	.word	0x20000010

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed4:	b094      	sub	sp, #80	; 0x50
 8001ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	647b      	str	r3, [r7, #68]	; 0x44
 8001edc:	2300      	movs	r3, #0
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee8:	4b79      	ldr	r3, [pc, #484]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d00d      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x40>
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	f200 80e1 	bhi.w	80020bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f02:	e0db      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f08:	e0db      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0a:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0e:	e0d8      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f42:	4622      	mov	r2, r4
 8001f44:	462b      	mov	r3, r5
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	1a51      	subs	r1, r2, r1
 8001f5e:	6139      	str	r1, [r7, #16]
 8001f60:	4629      	mov	r1, r5
 8001f62:	eb63 0301 	sbc.w	r3, r3, r1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f74:	4659      	mov	r1, fp
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	4651      	mov	r1, sl
 8001f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7e:	4651      	mov	r1, sl
 8001f80:	018a      	lsls	r2, r1, #6
 8001f82:	4651      	mov	r1, sl
 8001f84:	ebb2 0801 	subs.w	r8, r2, r1
 8001f88:	4659      	mov	r1, fp
 8001f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa2:	4690      	mov	r8, r2
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	eb18 0303 	adds.w	r3, r8, r3
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	462b      	mov	r3, r5
 8001fb0:	eb49 0303 	adc.w	r3, r9, r3
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	024b      	lsls	r3, r1, #9
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fcc:	4621      	mov	r1, r4
 8001fce:	024a      	lsls	r2, r1, #9
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fe0:	f7fe f8f8 	bl	80001d4 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fec:	e058      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002008:	4642      	mov	r2, r8
 800200a:	464b      	mov	r3, r9
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	0159      	lsls	r1, r3, #5
 8002016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201a:	0150      	lsls	r0, r2, #5
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4641      	mov	r1, r8
 8002022:	ebb2 0a01 	subs.w	sl, r2, r1
 8002026:	4649      	mov	r1, r9
 8002028:	eb63 0b01 	sbc.w	fp, r3, r1
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800203c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002040:	ebb2 040a 	subs.w	r4, r2, sl
 8002044:	eb63 050b 	sbc.w	r5, r3, fp
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	00eb      	lsls	r3, r5, #3
 8002052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	4614      	mov	r4, r2
 800205a:	461d      	mov	r5, r3
 800205c:	4643      	mov	r3, r8
 800205e:	18e3      	adds	r3, r4, r3
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	464b      	mov	r3, r9
 8002064:	eb45 0303 	adc.w	r3, r5, r3
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002076:	4629      	mov	r1, r5
 8002078:	028b      	lsls	r3, r1, #10
 800207a:	4621      	mov	r1, r4
 800207c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002080:	4621      	mov	r1, r4
 8002082:	028a      	lsls	r2, r1, #10
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208a:	2200      	movs	r2, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	61fa      	str	r2, [r7, #28]
 8002090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002094:	f7fe f89e 	bl	80001d4 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3750      	adds	r7, #80	; 0x50
 80020c8:	46bd      	mov	sp, r7
 80020ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	007a1200 	.word	0x007a1200

080020dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07b      	b.n	80021e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020fe:	d009      	beq.n	8002114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
 8002106:	e005      	b.n	8002114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe ff74 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	ea42 0103 	orr.w	r1, r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	f003 0104 	and.w	r1, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f003 0210 	and.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_SPI_Transmit+0x22>
 800220c:	2302      	movs	r3, #2
 800220e:	e126      	b.n	800245e <HAL_SPI_Transmit+0x270>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002218:	f7ff f848 	bl	80012ac <HAL_GetTick>
 800221c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002232:	e10b      	b.n	800244c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Transmit+0x52>
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002244:	e102      	b.n	800244c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228c:	d10f      	bne.n	80022ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b40      	cmp	r3, #64	; 0x40
 80022ba:	d007      	beq.n	80022cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d4:	d14b      	bne.n	800236e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0xf6>
 80022de:	8afb      	ldrh	r3, [r7, #22]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d13e      	bne.n	8002362 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	1c9a      	adds	r2, r3, #2
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002308:	e02b      	b.n	8002362 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d112      	bne.n	800233e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	1c9a      	adds	r2, r3, #2
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	86da      	strh	r2, [r3, #54]	; 0x36
 800233c:	e011      	b.n	8002362 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233e:	f7fe ffb5 	bl	80012ac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d803      	bhi.n	8002356 <HAL_SPI_Transmit+0x168>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d102      	bne.n	800235c <HAL_SPI_Transmit+0x16e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002360:	e074      	b.n	800244c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ce      	bne.n	800230a <HAL_SPI_Transmit+0x11c>
 800236c:	e04c      	b.n	8002408 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_SPI_Transmit+0x18e>
 8002376:	8afb      	ldrh	r3, [r7, #22]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d140      	bne.n	80023fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023a2:	e02c      	b.n	80023fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d113      	bne.n	80023da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80023d8:	e011      	b.n	80023fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023da:	f7fe ff67 	bl	80012ac <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d803      	bhi.n	80023f2 <HAL_SPI_Transmit+0x204>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d102      	bne.n	80023f8 <HAL_SPI_Transmit+0x20a>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023fc:	e026      	b.n	800244c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1cd      	bne.n	80023a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f8b3 	bl	8002578 <SPI_EndRxTxTransaction>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
 8002448:	e000      	b.n	800244c <HAL_SPI_Transmit+0x25e>
  }

error:
 800244a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800245c:	7ffb      	ldrb	r3, [r7, #31]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002478:	f7fe ff18 	bl	80012ac <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002488:	f7fe ff10 	bl	80012ac <HAL_GetTick>
 800248c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	015b      	lsls	r3, r3, #5
 8002494:	0d1b      	lsrs	r3, r3, #20
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249e:	e054      	b.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d050      	beq.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024a8:	f7fe ff00 	bl	80012ac <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <SPI_WaitFlagStateUntilTimeout+0x56>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d111      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e0:	d004      	beq.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d107      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d10f      	bne.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e017      	b.n	800256a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3b01      	subs	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	429a      	cmp	r2, r3
 8002566:	d19b      	bne.n	80024a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000000c 	.word	0x2000000c

08002578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <SPI_EndRxTxTransaction+0x7c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <SPI_EndRxTxTransaction+0x80>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a2:	d112      	bne.n	80025ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff ff5a 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00f      	b.n	80025ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d0f2      	beq.n	80025ca <SPI_EndRxTxTransaction+0x52>
 80025e4:	e000      	b.n	80025e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80025e6:	bf00      	nop
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	165e9f81 	.word	0x165e9f81

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 f820 	bl	8002654 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08003460 	.word	0x08003460
 8002638:	08003460 	.word	0x08003460
 800263c:	08003460 	.word	0x08003460
 8002640:	08003464 	.word	0x08003464

08002644 <memset>:
 8002644:	4402      	add	r2, r0
 8002646:	4603      	mov	r3, r0
 8002648:	4293      	cmp	r3, r2
 800264a:	d100      	bne.n	800264e <memset+0xa>
 800264c:	4770      	bx	lr
 800264e:	f803 1b01 	strb.w	r1, [r3], #1
 8002652:	e7f9      	b.n	8002648 <memset+0x4>

08002654 <_init>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr

08002660 <_fini>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr

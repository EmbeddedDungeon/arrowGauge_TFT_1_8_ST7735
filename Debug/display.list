
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003640  08003640  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003648  08003648  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000002c  0800367c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000328  0800367c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009848  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  000298a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016686  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac74  00000000  00000000  00042bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084204  00000000  00000000  0004d872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  000d1ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800283c 	.word	0x0800283c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	0800283c 	.word	0x0800283c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db0b      	blt.n	8000502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 021f 	and.w	r2, r3, #31
 80004f0:	4907      	ldr	r1, [pc, #28]	; (8000510 <__NVIC_EnableIRQ+0x38>)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	095b      	lsrs	r3, r3, #5
 80004f8:	2001      	movs	r0, #1
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000e100 	.word	0xe000e100

08000514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db0a      	blt.n	800053e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	490c      	ldr	r1, [pc, #48]	; (8000560 <__NVIC_SetPriority+0x4c>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800053c:	e00a      	b.n	8000554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4908      	ldr	r1, [pc, #32]	; (8000564 <__NVIC_SetPriority+0x50>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3b04      	subs	r3, #4
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	440b      	add	r3, r1
 8000552:	761a      	strb	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <USARTinit>:
#define MAX_BUFFER_SIZE 100
char buffer[MAX_BUFFER_SIZE];
volatile uint32_t buffer_index = 0;

void USARTinit()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (0b100000000000000000);
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <USARTinit+0xc4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <USARTinit+0xc4>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (0b1000);
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <USARTinit+0xc4>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <USARTinit+0xc4>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
	   GPIOD->MODER &=	~(0b11110000000000);
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <USARTinit+0xc8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <USARTinit+0xc8>)
 800058a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800058e:	6013      	str	r3, [r2, #0]
	   GPIOD->MODER |=	(0b10100000000000);
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <USARTinit+0xc8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <USARTinit+0xc8>)
 8000596:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800059a:	6013      	str	r3, [r2, #0]
	   GPIOD->AFR[0] &= ~(0b1111111100000000000000000000);
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <USARTinit+0xc8>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <USARTinit+0xc8>)
 80005a2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80005a6:	6213      	str	r3, [r2, #32]
	   GPIOD->AFR[0] |= (0b0111011100000000000000000000);
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <USARTinit+0xc8>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <USARTinit+0xc8>)
 80005ae:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 80005b2:	6213      	str	r3, [r2, #32]

	   USART2->CR1 = USART_CR1_UE;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <USARTinit+0xcc>)
 80005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ba:	60da      	str	r2, [r3, #12]
	   USART2->BRR = 42000000 / 9600;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <USARTinit+0xcc>)
 80005be:	f241 1217 	movw	r2, #4375	; 0x1117
 80005c2:	609a      	str	r2, [r3, #8]
	   USART2->CR1 &= ~USART_CR1_M; // 8 бит данных
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <USARTinit+0xcc>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <USARTinit+0xcc>)
 80005ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005ce:	60d3      	str	r3, [r2, #12]
	   USART2->CR1 &= ~USART_CR1_PCE; // Без бита контроля четности
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <USARTinit+0xcc>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <USARTinit+0xcc>)
 80005d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005da:	60d3      	str	r3, [r2, #12]
	   USART2->CR2 &= ~USART_CR2_STOP;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <USARTinit+0xcc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <USARTinit+0xcc>)
 80005e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005e6:	6113      	str	r3, [r2, #16]
	   // Включаем передатчик и приемник USART2
	   USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <USARTinit+0xcc>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <USARTinit+0xcc>)
 80005ee:	f043 030c 	orr.w	r3, r3, #12
 80005f2:	60d3      	str	r3, [r2, #12]

	   // Включаем USART2
	   USART2->CR1 |= USART_CR1_UE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <USARTinit+0xcc>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <USARTinit+0xcc>)
 80005fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005fe:	60d3      	str	r3, [r2, #12]
	   USART2->CR2 = 0;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <USARTinit+0xcc>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	   USART2->CR3 = 0;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <USARTinit+0xcc>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]

	   USART2->CR1 |= USART_CR1_RXNEIE; // Разрешаем прерывание по приему данных
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <USARTinit+0xcc>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <USARTinit+0xcc>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	60d3      	str	r3, [r2, #12]

	   NVIC_SetPriority(USART2_IRQn, 0); // Устанавливаем приоритет прерывания USART2
 8000618:	2100      	movs	r1, #0
 800061a:	2026      	movs	r0, #38	; 0x26
 800061c:	f7ff ff7a 	bl	8000514 <__NVIC_SetPriority>
	   NVIC_EnableIRQ(USART2_IRQn); // Разрешаем прерывание USART2
 8000620:	2026      	movs	r0, #38	; 0x26
 8000622:	f7ff ff59 	bl	80004d8 <__NVIC_EnableIRQ>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40004400 	.word	0x40004400

08000638 <__NVIC_EnableIRQ>:
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <__NVIC_EnableIRQ+0x38>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <SPI2_Init>:
#include "SDFlash.h"

#include "stm32f4xx.h"  // Убедитесь, что используете правильный заголовочный файл для вашей серии

void SPI2_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    // Включаем тактирование для GPIOB и SPI2
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // Включаем тактирование для GPIOB
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <SPI2_Init+0xc0>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a2d      	ldr	r2, [pc, #180]	; (8000734 <SPI2_Init+0xc0>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;   // Включаем тактирование для SPI2
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SPI2_Init+0xc0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <SPI2_Init+0xc0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40

    // Настраиваем пины GPIOB 13 (SCK), 14 (MISO) и 15 (MOSI) в режим альтернативной функции (AF5 для SPI2)
    GPIOB->MODER &= ~(GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk | GPIO_MODER_MODE15_Msk);
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <SPI2_Init+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <SPI2_Init+0xc4>)
 8000696:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800069a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);  // Устанавливаем режим альтернативной функции
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SPI2_Init+0xc4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <SPI2_Init+0xc4>)
 80006a2:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 80006a6:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL13_Msk | GPIO_AFRH_AFSEL14_Msk | GPIO_AFRH_AFSEL15_Msk);
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SPI2_Init+0xc4>)
 80006aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SPI2_Init+0xc4>)
 80006ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006b2:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (5 << GPIO_AFRH_AFSEL13_Pos) | (5 << GPIO_AFRH_AFSEL14_Pos) | (5 << GPIO_AFRH_AFSEL15_Pos); // Альтернативная функция AF5 для SPI2
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SPI2_Init+0xc4>)
 80006b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b8:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <SPI2_Init+0xc4>)
 80006ba:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80006be:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80006c2:	6253      	str	r3, [r2, #36]	; 0x24

    GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13 | GPIO_OSPEEDER_OSPEEDR14 | GPIO_OSPEEDER_OSPEEDR15);  // Высокая скорость
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <SPI2_Init+0xc4>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <SPI2_Init+0xc4>)
 80006ca:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80006ce:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk | GPIO_PUPDR_PUPD15_Msk);  // Без подтяжки
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <SPI2_Init+0xc4>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <SPI2_Init+0xc4>)
 80006d6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80006da:	60d3      	str	r3, [r2, #12]
    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);  // Пуш-пулл
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <SPI2_Init+0xc4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <SPI2_Init+0xc4>)
 80006e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006e6:	6053      	str	r3, [r2, #4]

    // Настройка SPI2
    SPI2->CR1 = 0;  // Сбросим регистр управления
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <SPI2_Init+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
    SPI2->CR1 |= SPI_CR1_MSTR;  // Устанавливаем режим ведущего (Master)
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <SPI2_Init+0xc8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <SPI2_Init+0xc8>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_BR_2;          // Установите делитель 8 (10.5 MHz)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <SPI2_Init+0xc8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <SPI2_Init+0xc8>)
 8000700:	f043 0320 	orr.w	r3, r3, #32
 8000704:	6013      	str	r3, [r2, #0]
    //SPI2->CR1 |= SPI_CR1_BR_1 | SPI_CR1_BR_0;  // Настраиваем скорость передачи (Baud Rate)
    SPI2->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;  // Программное управление SS (SSM) и внутренний сигнал SS (SSI)
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <SPI2_Init+0xc8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <SPI2_Init+0xc8>)
 800070c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000710:	6013      	str	r3, [r2, #0]

    // Включаем прерывания для TXE и RXNE
    SPI2->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <SPI2_Init+0xc8>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <SPI2_Init+0xc8>)
 8000718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800071c:	6053      	str	r3, [r2, #4]

    // Включаем SPI2
    SPI2->CR1 |= SPI_CR1_SPE;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <SPI2_Init+0xc8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <SPI2_Init+0xc8>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6013      	str	r3, [r2, #0]

    // Включаем прерывания в NVIC
    NVIC_EnableIRQ(SPI2_IRQn);
 800072a:	2024      	movs	r0, #36	; 0x24
 800072c:	f7ff ff84 	bl	8000638 <__NVIC_EnableIRQ>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400
 800073c:	40003800 	.word	0x40003800

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fd79 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f843 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f8e3 	bl	8000918 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000752:	f000 f8a9 	bl	80008a8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000756:	f001 ff7f 	bl	8002658 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  USARTinit();
 800075a:	f7ff ff05 	bl	8000568 <USARTinit>
  ST7735_Init();
 800075e:	f000 fab7 	bl	8000cd0 <ST7735_Init>

  ST7735_FillScreen(ST7735_RED);
 8000762:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000766:	f000 fbf5 	bl	8000f54 <ST7735_FillScreen>
  SPI2_Init();
 800076a:	f7ff ff83 	bl	8000674 <SPI2_Init>
	  //SPI2_SendByte(SDCardResult);
	  //char SDBuffer[2];
	  //itoa(SDCardResult, SDBuffer, 10);
    /* USER CODE BEGIN 3 */
	   // ST7735_DrawString(10, 30, SDBuffer, Font_11x18, ST7735_RED, ST7735_BLACK);
	  ST7735_DrawString(10, 0, "hello2", Font_11x18, ST7735_RED, ST7735_BLACK);
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <main+0x84>)
 8000770:	2200      	movs	r2, #0
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	9200      	str	r2, [sp, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <main+0x88>)
 8000782:	2100      	movs	r1, #0
 8000784:	200a      	movs	r0, #10
 8000786:	f000 fae7 	bl	8000d58 <ST7735_DrawString>


	  if (buffer_index > 0) {
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <main+0x8c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0ed      	beq.n	800076e <main+0x2e>
	 	      ST7735_FillScreen(ST7735_BLUE);
 8000792:	201f      	movs	r0, #31
 8000794:	f000 fbde 	bl	8000f54 <ST7735_FillScreen>

	       // Вызываем функцию для вывода текста на дисплей
	       ST7735_DrawString(10, 0, buffer, Font_11x18, ST7735_RED, ST7735_BLACK);
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <main+0x84>)
 800079a:	2200      	movs	r2, #0
 800079c:	9202      	str	r2, [sp, #8]
 800079e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <main+0x90>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 fad2 	bl	8000d58 <ST7735_DrawString>
	       // Очищаем буфер
	       buffer_index = 0;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <main+0x8c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
	       buffer[0] = '\0';
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <main+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
	  ST7735_DrawString(10, 0, "hello2", Font_11x18, ST7735_RED, ST7735_BLACK);
 80007c0:	e7d5      	b.n	800076e <main+0x2e>
 80007c2:	bf00      	nop
 80007c4:	20000000 	.word	0x20000000
 80007c8:	08002854 	.word	0x08002854
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	20000048 	.word	0x20000048

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f822 	bl	800282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0xcc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <SystemClock_Config+0xd0>)
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <SystemClock_Config+0xd0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000848:	2308      	movs	r3, #8
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800084c:	2354      	movs	r3, #84	; 0x54
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f807 	bl	8001870 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000868:	f000 f89a 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fa69 	bl	8001d60 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000894:	f000 f884 	bl	80009a0 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI1_Init+0x68>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_SPI1_Init+0x6c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_SPI1_Init+0x68>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_SPI1_Init+0x68>)
 80008bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_SPI1_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_SPI1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI1_Init+0x68>)
 80008d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI1_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI1_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI1_Init+0x68>)
 80008f6:	220a      	movs	r2, #10
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_SPI1_Init+0x68>)
 80008fc:	f001 fc1c 	bl	8002138 <HAL_SPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000906:	f000 f84b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000b0 	.word	0x200000b0
 8000914:	40013000 	.word	0x40013000

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_GPIO_Init+0x80>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <MX_GPIO_Init+0x80>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_GPIO_Init+0x80>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_GPIO_Init+0x80>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MX_GPIO_Init+0x80>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_GPIO_Init+0x80>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|Reset_Pin|CS_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x84>)
 800096e:	f000 ff65 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin Reset_Pin CS_Pin */
  GPIO_InitStruct.Pin = A0_Pin|Reset_Pin|CS_Pin;
 8000972:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0x84>)
 800098c:	f000 fdd2 	bl	8001534 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <ST7735_GPIO_Init>:
static void ST7735_WriteData(uint8_t* buff, size_t buff_size);
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);
static void ST7735_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <ST7735_GPIO_Init+0x60>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <ST7735_GPIO_Init+0x60>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <ST7735_GPIO_Init+0x60>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <ST7735_GPIO_Init+0x64>)
 80009e4:	f000 ff2a 	bl	800183c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 80009e8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80009ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <ST7735_GPIO_Init+0x64>)
 8000a00:	f000 fd98 	bl	8001534 <HAL_GPIO_Init>
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <ST7735_Reset+0x28>)
 8000a20:	f000 ff0c 	bl	800183c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a24:	2014      	movs	r0, #20
 8000a26:	f000 fc7b 	bl	8001320 <HAL_Delay>
	TFT_RES_H();
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <ST7735_Reset+0x28>)
 8000a32:	f000 ff03 	bl	800183c <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020000 	.word	0x40020000

08000a40 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <ST7735_WriteCommand+0x2c>)
 8000a52:	f000 fef3 	bl	800183c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a56:	1df9      	adds	r1, r7, #7
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <ST7735_WriteCommand+0x30>)
 8000a60:	f001 fbf3 	bl	800224a <HAL_SPI_Transmit>
#endif
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	200000b0 	.word	0x200000b0

08000a74 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <ST7735_WriteData+0x30>)
 8000a86:	f000 fed9 	bl	800183c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <ST7735_WriteData+0x34>)
 8000a96:	f001 fbd8 	bl	800224a <HAL_SPI_Transmit>
#endif
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200000b0 	.word	0x200000b0

08000aac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000abe:	e034      	b.n	8000b2a <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000aca:	7afb      	ldrb	r3, [r7, #11]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ffb7 	bl	8000a40 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000adc:	7abb      	ldrb	r3, [r7, #10]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000ae6:	7abb      	ldrb	r3, [r7, #10]
 8000ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aec:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000aee:	7abb      	ldrb	r3, [r7, #10]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d008      	beq.n	8000b06 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000af4:	7abb      	ldrb	r3, [r7, #10]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ffbb 	bl	8000a74 <ST7735_WriteData>
            addr += numArgs;
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000b06:	89bb      	ldrh	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00e      	beq.n	8000b2a <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d102      	bne.n	8000b22 <ST7735_ExecuteCommandList+0x76>
 8000b1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b20:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fbfb 	bl	8001320 <HAL_Delay>
    while(numCommands--)
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	73fa      	strb	r2, [r7, #15]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1c5      	bne.n	8000ac0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	4603      	mov	r3, r0
 8000b54:	71bb      	strb	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	717b      	strb	r3, [r7, #5]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b5e:	202a      	movs	r0, #42	; 0x2a
 8000b60:	f7ff ff6e 	bl	8000a40 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000b64:	2300      	movs	r3, #0
 8000b66:	733b      	strb	r3, [r7, #12]
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <ST7735_SetAddressWindow+0x88>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	737b      	strb	r3, [r7, #13]
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <ST7735_SetAddressWindow+0x88>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	797b      	ldrb	r3, [r7, #5]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff72 	bl	8000a74 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000b90:	202b      	movs	r0, #43	; 0x2b
 8000b92:	f7ff ff55 	bl	8000a40 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <ST7735_SetAddressWindow+0x8c>)
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <ST7735_SetAddressWindow+0x8c>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	793b      	ldrb	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5d 	bl	8000a74 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bba:	202c      	movs	r0, #44	; 0x2c
 8000bbc:	f7ff ff40 	bl	8000a40 <ST7735_WriteCommand>
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	20000108 	.word	0x20000108
 8000bcc:	20000109 	.word	0x20000109

08000bd0 <ST7735_WriteChar>:


static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	b590      	push	{r4, r7, lr}
 8000bd4:	b089      	sub	sp, #36	; 0x24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	460b      	mov	r3, r1
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, j;
    uint16_t line;

    // Проверка символов, допустимых в таблице шрифтов
    if (ch < 32 || ch > 126) return; // Поддерживаем только ASCII диапазон от 32 до 126
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2b1f      	cmp	r3, #31
 8000bea:	d96a      	bls.n	8000cc2 <ST7735_WriteChar+0xf2>
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b7e      	cmp	r3, #126	; 0x7e
 8000bf0:	d867      	bhi.n	8000cc2 <ST7735_WriteChar+0xf2>

    // Получаем индекс символа в таблице шрифтов
    uint32_t char_index = ch - 32; // ASCII 32 - пробел как начало таблицы
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	3b20      	subs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]

    // Устанавливаем адресное окно для рисования символа
    ST7735_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b2dc      	uxtb	r4, r3
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4622      	mov	r2, r4
 8000c22:	f7ff ff8d 	bl	8000b40 <ST7735_SetAddressWindow>

    // Проходим по строкам высоты шрифта
    for(i = 0; i < font.height; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e043      	b.n	8000cb4 <ST7735_WriteChar+0xe4>
    {
        // Читаем строку шрифта
        line = font.data[char_index * font.height + i];
 8000c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c32:	4619      	mov	r1, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fb03 f101 	mul.w	r1, r3, r1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	827b      	strh	r3, [r7, #18]

        // Проходим по каждому столбцу ширины шрифта
        for(j = 0; j < font.width; j++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e02a      	b.n	8000ca2 <ST7735_WriteChar+0xd2>
        {
            // Проверяем, установлен ли бит
            if (line & (0x8000 >> j))
 8000c4c:	8a7a      	ldrh	r2, [r7, #18]
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	fa41 f303 	asr.w	r3, r1, r3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00e      	beq.n	8000c7c <ST7735_WriteChar+0xac>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000c5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	743b      	strb	r3, [r7, #16]
 8000c68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fefd 	bl	8000a74 <ST7735_WriteData>
 8000c7a:	e00f      	b.n	8000c9c <ST7735_WriteChar+0xcc>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	733b      	strb	r3, [r7, #12]
 8000c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2102      	movs	r1, #2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff feec 	bl	8000a74 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d3ce      	bcc.n	8000c4c <ST7735_WriteChar+0x7c>
    for(i = 0; i < font.height; i++)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000cb8:	461a      	mov	r2, r3
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d3b5      	bcc.n	8000c2c <ST7735_WriteChar+0x5c>
 8000cc0:	e000      	b.n	8000cc4 <ST7735_WriteChar+0xf4>
    if (ch < 32 || ch > 126) return; // Поддерживаем только ASCII диапазон от 32 до 126
 8000cc2:	bf00      	nop
            }
        }
    }
}
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ccc:	b002      	add	sp, #8
 8000cce:	4770      	bx	lr

08000cd0 <ST7735_Init>:

void ST7735_Init()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000cd4:	f7ff fe6a 	bl	80009ac <ST7735_GPIO_Init>
	TFT_CS_L();
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	481a      	ldr	r0, [pc, #104]	; (8000d48 <ST7735_Init+0x78>)
 8000ce0:	f000 fdac 	bl	800183c <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000ce4:	f7ff fe96 	bl	8000a14 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <ST7735_Init+0x7c>)
 8000cea:	f7ff fedf 	bl	8000aac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <ST7735_Init+0x80>)
 8000cf0:	f7ff fedc 	bl	8000aac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <ST7735_Init+0x84>)
 8000cf6:	f7ff fed9 	bl	8000aac <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <ST7735_Init+0x78>)
 8000d02:	f000 fd9b 	bl	800183c <HAL_GPIO_WritePin>
    GPIOA->LCKR&= ~(0b1100);
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <ST7735_Init+0x78>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <ST7735_Init+0x78>)
 8000d0c:	f023 030c 	bic.w	r3, r3, #12
 8000d10:	61d3      	str	r3, [r2, #28]
       GPIOA->MODER &=	~(0b11110000);
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <ST7735_Init+0x78>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <ST7735_Init+0x78>)
 8000d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d1c:	6013      	str	r3, [r2, #0]
       GPIOA->PUPDR &= ~(0b11110000);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <ST7735_Init+0x78>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <ST7735_Init+0x78>)
 8000d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d28:	60d3      	str	r3, [r2, #12]
       GPIOA->OTYPER &= ~(0b1100);
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <ST7735_Init+0x78>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <ST7735_Init+0x78>)
 8000d30:	f023 030c 	bic.w	r3, r3, #12
 8000d34:	6053      	str	r3, [r2, #4]
       GPIOA->OSPEEDR &= ~(0b11110000);
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <ST7735_Init+0x78>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <ST7735_Init+0x78>)
 8000d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d40:	6093      	str	r3, [r2, #8]
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	080035b8 	.word	0x080035b8
 8000d50:	080035f4 	.word	0x080035f4
 8000d54:	08003604 	.word	0x08003604

08000d58 <ST7735_DrawString>:

    TFT_CS_H();
}


void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d58:	b082      	sub	sp, #8
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af04      	add	r7, sp, #16
 8000d60:	603a      	str	r2, [r7, #0]
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	4603      	mov	r3, r0
 8000d66:	80fb      	strh	r3, [r7, #6]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	80bb      	strh	r3, [r7, #4]
    TFT_CS_L();
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	482c      	ldr	r0, [pc, #176]	; (8000e24 <ST7735_DrawString+0xcc>)
 8000d74:	f000 fd62 	bl	800183c <HAL_GPIO_WritePin>

    while (*str) {
 8000d78:	e040      	b.n	8000dfc <ST7735_DrawString+0xa4>
        if (x + font.width >= _width) {
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	7d3a      	ldrb	r2, [r7, #20]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <ST7735_DrawString+0xd0>)
 8000d82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	db16      	blt.n	8000db8 <ST7735_DrawString+0x60>
            x = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d8e:	7d7b      	ldrb	r3, [r7, #21]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	7d7a      	ldrb	r2, [r7, #21]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <ST7735_DrawString+0xd4>)
 8000da0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	da2e      	bge.n	8000e06 <ST7735_DrawString+0xae>
                break;
            }

            if (*str == ' ') {
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	d103      	bne.n	8000db8 <ST7735_DrawString+0x60>
                // Пропускаем пробелы в начале новой строки
                str++;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
                continue;
 8000db6:	e021      	b.n	8000dfc <ST7735_DrawString+0xa4>
            }
        }
        if (*str == ' ') {
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d108      	bne.n	8000dd2 <ST7735_DrawString+0x7a>
            x += font.width;
 8000dc0:	7d3b      	ldrb	r3, [r7, #20]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
            // Пропускаем пробелы в начале новой строки
            str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
            continue;
 8000dd0:	e014      	b.n	8000dfc <ST7735_DrawString+0xa4>
        }

        // Выводим символ с полученным индексом
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	88b9      	ldrh	r1, [r7, #4]
 8000dd8:	88f8      	ldrh	r0, [r7, #6]
 8000dda:	8c3b      	ldrh	r3, [r7, #32]
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	8bbb      	ldrh	r3, [r7, #28]
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f7ff fef2 	bl	8000bd0 <ST7735_WriteChar>

        x += font.width;
 8000dec:	7d3b      	ldrb	r3, [r7, #20]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	4413      	add	r3, r2
 8000df4:	80fb      	strh	r3, [r7, #6]
        str++;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	603b      	str	r3, [r7, #0]
    while (*str) {
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1ba      	bne.n	8000d7a <ST7735_DrawString+0x22>
 8000e04:	e000      	b.n	8000e08 <ST7735_DrawString+0xb0>
                break;
 8000e06:	bf00      	nop
    }

    TFT_CS_H();
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <ST7735_DrawString+0xcc>)
 8000e10:	f000 fd14 	bl	800183c <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1e:	b002      	add	sp, #8
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40020000 	.word	0x40020000
 8000e28:	2000000a 	.word	0x2000000a
 8000e2c:	20000008 	.word	0x20000008

08000e30 <ST7735_FillRectangle>:



void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <ST7735_FillRectangle+0x114>)
 8000e52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	da6f      	bge.n	8000f3a <ST7735_FillRectangle+0x10a>
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <ST7735_FillRectangle+0x118>)
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	da69      	bge.n	8000f3a <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a35      	ldr	r2, [pc, #212]	; (8000f44 <ST7735_FillRectangle+0x114>)
 8000e6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dd06      	ble.n	8000e84 <ST7735_FillRectangle+0x54>
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <ST7735_FillRectangle+0x114>)
 8000e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000e84:	88ba      	ldrh	r2, [r7, #4]
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <ST7735_FillRectangle+0x118>)
 8000e8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dd06      	ble.n	8000ea2 <ST7735_FillRectangle+0x72>
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <ST7735_FillRectangle+0x118>)
 8000e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	4828      	ldr	r0, [pc, #160]	; (8000f4c <ST7735_FillRectangle+0x11c>)
 8000eaa:	f000 fcc7 	bl	800183c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	b2d8      	uxtb	r0, r3
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	883b      	ldrh	r3, [r7, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4622      	mov	r2, r4
 8000ed8:	f7ff fe32 	bl	8000b40 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000edc:	8c3b      	ldrh	r3, [r7, #32]
 8000ede:	0a1b      	lsrs	r3, r3, #8
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	733b      	strb	r3, [r7, #12]
 8000ee6:	8c3b      	ldrh	r3, [r7, #32]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <ST7735_FillRectangle+0x11c>)
 8000ef4:	f000 fca2 	bl	800183c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	80bb      	strh	r3, [r7, #4]
 8000efc:	e013      	b.n	8000f26 <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	e00a      	b.n	8000f1a <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000f04:	f107 010c 	add.w	r1, r7, #12
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <ST7735_FillRectangle+0x120>)
 8000f10:	f001 f99b 	bl	800224a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f1      	bne.n	8000f04 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e8      	bne.n	8000efe <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <ST7735_FillRectangle+0x11c>)
 8000f34:	f000 fc82 	bl	800183c <HAL_GPIO_WritePin>
 8000f38:	e000      	b.n	8000f3c <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 8000f3a:	bf00      	nop
}
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000000a 	.word	0x2000000a
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	200000b0 	.word	0x200000b0

08000f54 <ST7735_FillScreen>:


void ST7735_FillScreen(uint16_t color)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <ST7735_FillScreen+0x30>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <ST7735_FillScreen+0x34>)
 8000f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	460b      	mov	r3, r1
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff5a 	bl	8000e30 <ST7735_FillRectangle>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000000a 	.word	0x2000000a
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_SPI_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001036:	23a0      	movs	r3, #160	; 0xa0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001052:	f000 fa6f 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f912 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <USART2_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART2_IRQHandler() {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
	 if (USART2->SR & USART_SR_RXNE) { // Проверяем, что прерывание вызвано приемом данных
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <USART2_IRQHandler+0x5c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01d      	beq.n	800110e <USART2_IRQHandler+0x4e>
	        char received_char = USART2->DR; // Считываем принятый символ
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <USART2_IRQHandler+0x5c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	71fb      	strb	r3, [r7, #7]

	        // Отправляем принятый символ назад
	        while (!(USART2->SR & USART_SR_TXE)); // Ждем, пока буфер передачи освободится
 80010d8:	bf00      	nop
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <USART2_IRQHandler+0x5c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f9      	beq.n	80010da <USART2_IRQHandler+0x1a>
	        USART2->DR = received_char; // Передаем символ для отправки
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <USART2_IRQHandler+0x5c>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	6053      	str	r3, [r2, #4]

	        // Если нужно очистить флаг прерывания, это делается автоматически при чтении DR регистра

	        // Сохраняем принятый символ в буфере
			if (buffer_index < MAX_BUFFER_SIZE - 1) { // Проверяем, что есть место в буфере
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <USART2_IRQHandler+0x60>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b62      	cmp	r3, #98	; 0x62
 80010f2:	d80c      	bhi.n	800110e <USART2_IRQHandler+0x4e>
				buffer[buffer_index++] = received_char;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <USART2_IRQHandler+0x60>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	4909      	ldr	r1, [pc, #36]	; (8001120 <USART2_IRQHandler+0x60>)
 80010fc:	600a      	str	r2, [r1, #0]
 80010fe:	4909      	ldr	r1, [pc, #36]	; (8001124 <USART2_IRQHandler+0x64>)
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	54ca      	strb	r2, [r1, r3]
				buffer[buffer_index] = '\0'; // Добавляем завершающий нулевой символ
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <USART2_IRQHandler+0x60>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <USART2_IRQHandler+0x64>)
 800110a:	2100      	movs	r1, #0
 800110c:	54d1      	strb	r1, [r2, r3]
			}
	 }

}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40004400 	.word	0x40004400
 8001120:	200000ac 	.word	0x200000ac
 8001124:	20000048 	.word	0x20000048

08001128 <SPI2_IRQHandler>:
volatile uint8_t txHead = 0;
volatile uint8_t txTail = 0;
volatile uint8_t rxHead = 0;
volatile uint8_t rxTail = 0;

void SPI2_IRQHandler(void) {
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    if (SPI2->SR & SPI_SR_TXE) {  // Прерывание при пустом буфере передачи
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SPI2_IRQHandler+0x84>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01e      	beq.n	8001176 <SPI2_IRQHandler+0x4e>
        if (txHead != txTail) {
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <SPI2_IRQHandler+0x88>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <SPI2_IRQHandler+0x8c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d010      	beq.n	800116a <SPI2_IRQHandler+0x42>
            SPI2->DR = txBuffer[txTail];
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <SPI2_IRQHandler+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <SPI2_IRQHandler+0x90>)
 8001152:	5c9b      	ldrb	r3, [r3, r2]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <SPI2_IRQHandler+0x84>)
 8001158:	60da      	str	r2, [r3, #12]
            txTail = (txTail + 1) % sizeof(txBuffer);
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <SPI2_IRQHandler+0x8c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <SPI2_IRQHandler+0x8c>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e005      	b.n	8001176 <SPI2_IRQHandler+0x4e>
        } else {
            SPI2->CR2 &= ~SPI_CR2_TXEIE;  // Отключаем прерывание TXE, если буфер пуст
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SPI2_IRQHandler+0x84>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <SPI2_IRQHandler+0x84>)
 8001170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001174:	6053      	str	r3, [r2, #4]
        }
    }

    if (SPI2->SR & SPI_SR_RXNE) {  // Прерывание при получении данных
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <SPI2_IRQHandler+0x84>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00f      	beq.n	80011a2 <SPI2_IRQHandler+0x7a>
        rxBuffer[rxHead] = SPI2->DR;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <SPI2_IRQHandler+0x84>)
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <SPI2_IRQHandler+0x94>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <SPI2_IRQHandler+0x98>)
 8001192:	5499      	strb	r1, [r3, r2]
        rxHead = (rxHead + 1) % sizeof(rxBuffer);
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <SPI2_IRQHandler+0x94>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <SPI2_IRQHandler+0x94>)
 80011a0:	701a      	strb	r2, [r3, #0]
    }
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40003800 	.word	0x40003800
 80011b0:	2000030c 	.word	0x2000030c
 80011b4:	2000030d 	.word	0x2000030d
 80011b8:	2000010c 	.word	0x2000010c
 80011bc:	2000030e 	.word	0x2000030e
 80011c0:	2000020c 	.word	0x2000020c

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd7 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f001 fae5 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fa91 	bl	8000740 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800122c:	08003650 	.word	0x08003650
  ldr r2, =_sbss
 8001230:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001234:	20000328 	.word	0x20000328

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f931 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fe8c 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f93b 	bl	800151a <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f911 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000014 	.word	0x20000014
 80012dc:	20000010 	.word	0x20000010

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000014 	.word	0x20000014
 8001304:	20000310 	.word	0x20000310

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000310 	.word	0x20000310

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000014 	.word	0x20000014

08001368 <__NVIC_SetPriorityGrouping>:
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff47 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff5c 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffb0 	bl	8001488 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e159      	b.n	8001804 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8148 	bne.w	80017fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d005      	beq.n	8001586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	2b02      	cmp	r3, #2
 8001584:	d130      	bne.n	80015e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	69b9      	ldr	r1, [r7, #24]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a2 	beq.w	80017fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_GPIO_Init+0x2e8>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a56      	ldr	r2, [pc, #344]	; (800181c <HAL_GPIO_Init+0x2e8>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b54      	ldr	r3, [pc, #336]	; (800181c <HAL_GPIO_Init+0x2e8>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_GPIO_Init+0x2ec>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x202>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_GPIO_Init+0x2f4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x1fe>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_GPIO_Init+0x2f8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x1fa>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a46      	ldr	r2, [pc, #280]	; (8001830 <HAL_GPIO_Init+0x2fc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x1f6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_GPIO_Init+0x300>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x1f2>
 8001722:	2304      	movs	r3, #4
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x204>
 8001726:	2307      	movs	r3, #7
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x204>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x204>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x204>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x204>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4935      	ldr	r1, [pc, #212]	; (8001820 <HAL_GPIO_Init+0x2ec>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_GPIO_Init+0x304>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x304>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_GPIO_Init+0x304>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a4:	4a24      	ldr	r2, [pc, #144]	; (8001838 <HAL_GPIO_Init+0x304>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <HAL_GPIO_Init+0x304>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x304>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_GPIO_Init+0x304>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_GPIO_Init+0x304>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f aea2 	bls.w	8001550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e267      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d075      	beq.n	800197a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188e:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b04      	cmp	r3, #4
 8001898:	d00c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b2:	d10b      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05b      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d157      	bne.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e242      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x74>
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6c      	ldr	r2, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 8001908:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a68      	ldr	r2, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fcee 	bl	8001308 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fcea 	bl	8001308 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e207      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xc0>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fcda 	bl	8001308 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fcd6 	bl	8001308 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1f3      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d11c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e1c7      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4937      	ldr	r1, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e03a      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_OscConfig+0x244>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fc8f 	bl	8001308 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fc8b 	bl	8001308 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1a8      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4925      	ldr	r1, [pc, #148]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x244>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fc6e 	bl	8001308 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc6a 	bl	8001308 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e187      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d036      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x248>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff fc4e 	bl	8001308 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc4a 	bl	8001308 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e167      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x200>
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x248>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fc37 	bl	8001308 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	e00e      	b.n	8001abc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fc33 	bl	8001308 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d907      	bls.n	8001abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e150      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	42470000 	.word	0x42470000
 8001ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ea      	bne.n	8001a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8097 	beq.w	8001c04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a7c      	ldr	r2, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0x474>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b12:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_RCC_OscConfig+0x474>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a73      	ldr	r2, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x474>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fbf3 	bl	8001308 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff fbef 	bl	8001308 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e10c      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x474>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2ea>
 8001b4c:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a63      	ldr	r2, [pc, #396]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	e01c      	b.n	8001b94 <HAL_RCC_OscConfig+0x324>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x30c>
 8001b62:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a5e      	ldr	r2, [pc, #376]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a5b      	ldr	r2, [pc, #364]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0x324>
 8001b7c:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a57      	ldr	r2, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fbb4 	bl	8001308 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fbb0 	bl	8001308 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0cb      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ee      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x334>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb9e 	bl	8001308 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fb9a 	bl	8001308 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0b5      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ee      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a1 	beq.w	8001d50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d05c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d141      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_OscConfig+0x478>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fb6e 	bl	8001308 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fb6a 	bl	8001308 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e087      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	041b      	lsls	r3, r3, #16
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	491b      	ldr	r1, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x478>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb43 	bl	8001308 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb3f 	bl	8001308 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e05c      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x416>
 8001ca4:	e054      	b.n	8001d50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_OscConfig+0x478>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb2c 	bl	8001308 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff fb28 	bl	8001308 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e045      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x444>
 8001cd2:	e03d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e038      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x4ec>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d028      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d121      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d11a      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d111      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	3b01      	subs	r3, #1
 8001d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0cc      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b68      	ldr	r3, [pc, #416]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d90c      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b65      	ldr	r3, [pc, #404]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0b8      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	494d      	ldr	r1, [pc, #308]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d044      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e067      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4934      	ldr	r1, [pc, #208]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff fa5a 	bl	8001308 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff fa56 	bl	8001308 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e04f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d20c      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e032      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4916      	ldr	r1, [pc, #88]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee6:	f000 f821 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	490a      	ldr	r1, [pc, #40]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	5ccb      	ldrb	r3, [r1, r3]
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f9ba 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08003630 	.word	0x08003630
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	20000010 	.word	0x20000010

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f30:	b094      	sub	sp, #80	; 0x50
 8001f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d00d      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x40>
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	f200 80e1 	bhi.w	8002118 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f5e:	e0db      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b73      	ldr	r3, [pc, #460]	; (8002130 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f64:	e0db      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f6a:	e0d8      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d063      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	0159      	lsls	r1, r3, #5
 8001fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb0:	0150      	lsls	r0, r2, #5
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	1a51      	subs	r1, r2, r1
 8001fba:	6139      	str	r1, [r7, #16]
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	018b      	lsls	r3, r1, #6
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fda:	4651      	mov	r1, sl
 8001fdc:	018a      	lsls	r2, r1, #6
 8001fde:	4651      	mov	r1, sl
 8001fe0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
 8002002:	4623      	mov	r3, r4
 8002004:	eb18 0303 	adds.w	r3, r8, r3
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	462b      	mov	r3, r5
 800200c:	eb49 0303 	adc.w	r3, r9, r3
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800201e:	4629      	mov	r1, r5
 8002020:	024b      	lsls	r3, r1, #9
 8002022:	4621      	mov	r1, r4
 8002024:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002028:	4621      	mov	r1, r4
 800202a:	024a      	lsls	r2, r1, #9
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	2200      	movs	r2, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
 8002036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800203c:	f7fe f8ca 	bl	80001d4 <__aeabi_uldivmod>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4613      	mov	r3, r2
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002048:	e058      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	2200      	movs	r2, #0
 8002052:	4618      	mov	r0, r3
 8002054:	4611      	mov	r1, r2
 8002056:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002064:	4642      	mov	r2, r8
 8002066:	464b      	mov	r3, r9
 8002068:	f04f 0000 	mov.w	r0, #0
 800206c:	f04f 0100 	mov.w	r1, #0
 8002070:	0159      	lsls	r1, r3, #5
 8002072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002076:	0150      	lsls	r0, r2, #5
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4641      	mov	r1, r8
 800207e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002082:	4649      	mov	r1, r9
 8002084:	eb63 0b01 	sbc.w	fp, r3, r1
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002094:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002098:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800209c:	ebb2 040a 	subs.w	r4, r2, sl
 80020a0:	eb63 050b 	sbc.w	r5, r3, fp
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	00eb      	lsls	r3, r5, #3
 80020ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020b2:	00e2      	lsls	r2, r4, #3
 80020b4:	4614      	mov	r4, r2
 80020b6:	461d      	mov	r5, r3
 80020b8:	4643      	mov	r3, r8
 80020ba:	18e3      	adds	r3, r4, r3
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	464b      	mov	r3, r9
 80020c0:	eb45 0303 	adc.w	r3, r5, r3
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020d2:	4629      	mov	r1, r5
 80020d4:	028b      	lsls	r3, r1, #10
 80020d6:	4621      	mov	r1, r4
 80020d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020dc:	4621      	mov	r1, r4
 80020de:	028a      	lsls	r2, r1, #10
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	2200      	movs	r2, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	61fa      	str	r2, [r7, #28]
 80020ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f0:	f7fe f870 	bl	80001d4 <__aeabi_uldivmod>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4613      	mov	r3, r2
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_GetSysClockFreq+0x200>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800210c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800210e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetSysClockFreq+0x204>)
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002120:	4618      	mov	r0, r3
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	00f42400 	.word	0x00f42400
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07b      	b.n	8002242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d009      	beq.n	8002170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	e005      	b.n	8002170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe ff26 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	ea42 0103 	orr.w	r1, r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0104 	and.w	r1, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 0210 	and.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_SPI_Transmit+0x22>
 8002268:	2302      	movs	r3, #2
 800226a:	e126      	b.n	80024ba <HAL_SPI_Transmit+0x270>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002274:	f7ff f848 	bl	8001308 <HAL_GetTick>
 8002278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800228e:	e10b      	b.n	80024a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_SPI_Transmit+0x52>
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022a0:	e102      	b.n	80024a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e8:	d10f      	bne.n	800230a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d007      	beq.n	8002328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002330:	d14b      	bne.n	80023ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_SPI_Transmit+0xf6>
 800233a:	8afb      	ldrh	r3, [r7, #22]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d13e      	bne.n	80023be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002364:	e02b      	b.n	80023be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d112      	bne.n	800239a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
 8002398:	e011      	b.n	80023be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239a:	f7fe ffb5 	bl	8001308 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d803      	bhi.n	80023b2 <HAL_SPI_Transmit+0x168>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d102      	bne.n	80023b8 <HAL_SPI_Transmit+0x16e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023bc:	e074      	b.n	80024a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ce      	bne.n	8002366 <HAL_SPI_Transmit+0x11c>
 80023c8:	e04c      	b.n	8002464 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_SPI_Transmit+0x18e>
 80023d2:	8afb      	ldrh	r3, [r7, #22]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d140      	bne.n	800245a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023fe:	e02c      	b.n	800245a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d113      	bne.n	8002436 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	; 0x36
 8002434:	e011      	b.n	800245a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe ff67 	bl	8001308 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Transmit+0x204>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Transmit+0x20a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002458:	e026      	b.n	80024a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1cd      	bne.n	8002400 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f8b3 	bl	80025d4 <SPI_EndRxTxTransaction>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	e000      	b.n	80024a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80024a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024d4:	f7fe ff18 	bl	8001308 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024e4:	f7fe ff10 	bl	8001308 <HAL_GetTick>
 80024e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	015b      	lsls	r3, r3, #5
 80024f0:	0d1b      	lsrs	r3, r3, #20
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fa:	e054      	b.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d050      	beq.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002504:	f7fe ff00 	bl	8001308 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	d902      	bls.n	800251a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d13d      	bne.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d111      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d004      	beq.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d107      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d10f      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e017      	b.n	80025c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d19b      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000000c 	.word	0x2000000c

080025d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <SPI_EndRxTxTransaction+0x7c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <SPI_EndRxTxTransaction+0x80>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0d5b      	lsrs	r3, r3, #21
 80025ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025fe:	d112      	bne.n	8002626 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff ff5a 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e00f      	b.n	8002646 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3b01      	subs	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d0f2      	beq.n	8002626 <SPI_EndRxTxTransaction+0x52>
 8002640:	e000      	b.n	8002644 <SPI_EndRxTxTransaction+0x70>
        break;
 8002642:	bf00      	nop
  }

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000000c 	.word	0x2000000c
 8002654:	165e9f81 	.word	0x165e9f81

08002658 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800265c:	4904      	ldr	r1, [pc, #16]	; (8002670 <MX_FATFS_Init+0x18>)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_FATFS_Init+0x1c>)
 8002660:	f000 f8b0 	bl	80027c4 <FATFS_LinkDriver>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <MX_FATFS_Init+0x20>)
 800266a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000318 	.word	0x20000318
 8002674:	20000018 	.word	0x20000018
 8002678:	20000314 	.word	0x20000314

0800267c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <USER_initialize+0x24>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <USER_initialize+0x24>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000015 	.word	0x20000015

080026a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <USER_status+0x24>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <USER_status+0x24>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000015 	.word	0x20000015

080026cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80026dc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80026fa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	603a      	str	r2, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	460b      	mov	r3, r1
 8002716:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
    return res;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 8002744:	7a5b      	ldrb	r3, [r3, #9]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d131      	bne.n	80027b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 800274e:	7a5b      	ldrb	r3, [r3, #9]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 800275c:	7a5b      	ldrb	r3, [r3, #9]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 800276c:	7a5b      	ldrb	r3, [r3, #9]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 8002774:	4413      	add	r3, r2
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 800277c:	7a5b      	ldrb	r3, [r3, #9]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	b2d1      	uxtb	r1, r2
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <FATFS_LinkDriverEx+0x94>)
 8002786:	7251      	strb	r1, [r2, #9]
 8002788:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800278a:	7dbb      	ldrb	r3, [r7, #22]
 800278c:	3330      	adds	r3, #48	; 0x30
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3301      	adds	r3, #1
 8002798:	223a      	movs	r2, #58	; 0x3a
 800279a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3302      	adds	r3, #2
 80027a0:	222f      	movs	r2, #47	; 0x2f
 80027a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3303      	adds	r3, #3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000031c 	.word	0x2000031c

080027c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffaa 	bl	800272c <FATFS_LinkDriverEx>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4d0d      	ldr	r5, [pc, #52]	; (800281c <__libc_init_array+0x38>)
 80027e8:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <__libc_init_array+0x3c>)
 80027ea:	1b64      	subs	r4, r4, r5
 80027ec:	10a4      	asrs	r4, r4, #2
 80027ee:	2600      	movs	r6, #0
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	4d0b      	ldr	r5, [pc, #44]	; (8002824 <__libc_init_array+0x40>)
 80027f6:	4c0c      	ldr	r4, [pc, #48]	; (8002828 <__libc_init_array+0x44>)
 80027f8:	f000 f820 	bl	800283c <_init>
 80027fc:	1b64      	subs	r4, r4, r5
 80027fe:	10a4      	asrs	r4, r4, #2
 8002800:	2600      	movs	r6, #0
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	08003648 	.word	0x08003648
 8002820:	08003648 	.word	0x08003648
 8002824:	08003648 	.word	0x08003648
 8002828:	0800364c 	.word	0x0800364c

0800282c <memset>:
 800282c:	4402      	add	r2, r0
 800282e:	4603      	mov	r3, r0
 8002830:	4293      	cmp	r3, r2
 8002832:	d100      	bne.n	8002836 <memset+0xa>
 8002834:	4770      	bx	lr
 8002836:	f803 1b01 	strb.w	r1, [r3], #1
 800283a:	e7f9      	b.n	8002830 <memset+0x4>

0800283c <_init>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	bf00      	nop
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr

08002848 <_fini>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr
